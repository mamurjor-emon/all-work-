<?php

namespace App\Http\Controllers\Admin;

use App\Models\User;
use Stripe\Discount;
use App\Models\Coupon;
use App\Models\Invoice;
use App\Models\Service;
use Illuminate\Http\Request;
use App\Models\CouponDiscount;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Http\Requests\CouponRequest;
use function GuzzleHttp\Promise\all;
use Illuminate\Support\Facades\Auth;

use Illuminate\Support\Facades\Gate;
use Yajra\DataTables\Facades\DataTables;

class CouponController extends Controller
{

    /**
     * Coupon index page show
     * @method GET
     * @return Response
     */
    public function index($subdomain)
    {
        if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
            $breadcrumb = ['Dashboard' => route(user_role_name() . '.dashboard', admin_workspace()), 'Coupons' => ''];
            $this->setPageTitle('Coupons');
            // url
            $url = [
                'getData'     => route(user_role_name() . '.coupons.get.data', admin_workspace()),
                'pending'     => route(user_role_name() . '.coupons.status', admin_workspace()),
                'approved'    => route(user_role_name() . '.coupons.status', admin_workspace()),
                'delete'      => route(user_role_name() . '.coupons.delete', admin_workspace())
            ];

            return view('backend.admin.pages.coupons.index', compact('breadcrumb', 'url'));
        } else {
            abort(401);
        }
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function getData(Request $request, $subdomain)
    {
        if ($request->ajax()) {
            $getData = Coupon::where('ownner_id', user_ownner(Auth::id()))->latest();

            return DataTables::eloquent($getData)
                ->addIndexColumn()
                ->filter(function ($query) use ($request) {
                    if (!empty($request->search)) {

                        $limit = '';
                        if ($request->get('search') == "Forever" || $request->get('search') == "forever") {
                            $limit = 1;
                        } else if ($request->get('search') == "First Payment" || $request->get('search') == "first payment") {
                            $limit = 2;
                        }

                        $query->where('status', '=', 1)
                            ->where('coupon_code', 'like', "%{$request->get('search')}%")
                            ->orWhere('description', 'like', "%{$request->get('search')}%")
                            ->orWhere('discount_duration', $limit);
                    }
                })
                ->addColumn('description', function ($data) {
                    return $data->description ?? '--';
                })
                ->addColumn('type', function ($data) {
                    return $data->discount_type == 1 ? '$' : '%';
                })
                ->addColumn('usages', function ($data) {
                    return $data->discount_duration == 1 ? 'Forever' : 'First Payment';
                })
                ->addColumn('use_limit', function ($data) {
                    return $data->how_number_use ?? 0;
                })
                ->addColumn('expiry_date', function ($data) {
                    return $data->expiry_date ? date('j M, Y', strtotime($data->expiry_date)) : '--';
                })
                ->addColumn('bulk_check', function ($data) {
                    return '
                    <div class="form-check form-check-primary my-0">
                        <label class="form-check-label">
                            <input type="checkbox" class="form-check-input" name="checkbox_data" data-id="' . $data->id . '">
                            <i class="input-helper"></i>
                        </label>
                    </div>';
                })
                ->addColumn('status', function ($data) {
                    if ($data->status == 2) {
                        $badgeClass = 'badge-danger';
                        $badgeTitle = 'Inactive';
                    } else if ($data->status == 1) {
                        $badgeClass = 'badge-success';
                        $badgeTitle = 'Active';
                    }

                    return '<span class="badge rounded-pill ' . $badgeClass . '  me-1">' . $badgeTitle . '</span>';
                })
                ->addColumn('action', function ($data) {
                    if ($data->status == 1) {
                        $approvedClass = 'pending-btn';
                        $approved = 'Inactive';
                        $icon = "<i data-feather='arrow-down-circle'></i>";
                    } else {
                        $approvedClass = 'approved-btn';
                        $approved = 'Active';
                        $icon = "<i data-feather='arrow-up-circle'></i>";
                    }
                    $actionBtn = '
                        <div class="dropdown">
                            <button type="button" class="btn btn-sm dropdown-toggle hide-arrow py-0 waves-effect waves-float waves-light" data-bs-toggle="dropdown" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-vertical"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>
                            </button>
                            <div class="dropdown-menu dropdown-menu-end" style="">
                                <a class="dropdown-item" href="' . route(user_role_name() . '.coupons.edit', ['subdomain' => admin_workspace(), 'id' => $data->id]) . '">
                                <i data-feather="edit"></i>
                                <span>Edit</span>
                                 </a>
                                <a class="dropdown-item" href="' . route(user_role_name() . '.coupons.duplicate', ['subdomain' => admin_workspace(), 'id' => $data->id]) . '">
                                <i data-feather="copy"></i>
                                <span>Duplicate</span>
                                 </a>
                                <button type="button" class="dropdown-item w-100 ' . $approvedClass . '" data-id="' . $data->id . '">
                                    ' . $icon . '
                                    <span>' . $approved . '</span>
                                </button>
                                <button type="button" class="dropdown-item deletable-btn w-100" data-id="' . $data->id . '">
                                    <i data-feather="trash-2"></i>
                                    <span>Delete</span>
                                </button>
                            </div>
                        </div>
                        ';
                    return $actionBtn;
                })
                ->rawColumns(['status', 'action', 'discount', 'expiry_date', 'bulk_check'])
                ->make(true);
        }
    }

    /**
     * @method GET
     * @return Response
     * coupon create page show
     */
    public function create($subdomain)
    {
        if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
            $this->setPageTitle('Create');
            $services = Service::where('admin_id', user_ownner(Auth::id()))->latest()->get();
            $breadcrumb = ['Dashboard' => route(user_role_name() . '.dashboard', admin_workspace()), 'Coupon' => route(user_role_name() . '.coupons.index', admin_workspace()), 'Create' => ''];
            // url
            $url = [
                'store'    => route(user_role_name() . '.coupons.store', admin_workspace()),
                'update'   => route(user_role_name() . '.coupons.update', admin_workspace()),
                'redirect' => route(user_role_name() . '.coupons.index', admin_workspace())
            ];

            return view('backend.admin.pages.coupons.form', compact('breadcrumb', 'services', 'url'));
        } else {
            abort(401);
        }
    }

    /**
     * Coupon store
     * @method POST
     * @param Illuminate\Http\Request $request
     * @return Response
     */
    public function store(CouponRequest $request, $subdomain)
    {
        if ($request->ajax()) {
            DB::beginTransaction();
            try {
                if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {

                    if ($request->expiry_date_check) {
                        $date = $request->expiry_date ? $request->expiry_date : Carbon::now();
                    } else {
                        $date = $request->expiry_date;
                    }

                    $coupon = Coupon::create([
                        'ownner_id'         => user_ownner(Auth::id()),
                        'coupon_code'       => $request->coupon_code,
                        'description'       => $request->description,
                        'discount_type'     => $request->discount_type,
                        'discount_duration' => $request->discount_duration,
                        'is_one_use'        => $request->one_use_per_customer ? 1 : 0,
                        'is_number_use'     => $request->number_use_per_user_check ? 1 : 0,
                        'is_expiry_date'    => $request->expiry_date_check ? 1 : 0,
                        'how_number_use'    => $request->number_use_per_user,
                        'expiry_date'       =>  $date,
                    ]);

                    $service_date = [];
                    foreach ($request->applies as $value) {
                        CouponDiscount::create([
                            'coupon_id'   => $coupon->id,
                            'service_ids' => json_encode($service_date[] = [$value['services']]),
                            'discount'    => $value['discount'],
                        ]);
                    }

                    $output = ['status' => 'success', 'message' => 'Coupon created successfull'];
                    DB::commit();
                } else {
                    $output = ['status' => 'error', 'message' => UNAUTHORIZED];
                }
            } catch (\Exception $e) {
                DB::rollback();
                $output = ['status' => 'success', 'message' => 'Server Error.'];
            }

            return response()->json($output);
        }
    }


    public function edit($subdomain, $id)
    {

        if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
            $this->setPageTitle('Edit');
            $services = Service::where('admin_id', user_ownner(Auth::id()))->latest()->get();
            $breadcrumb = ['Dashboard' => route(user_role_name() . '.dashboard', admin_workspace()), 'Coupon' => route(user_role_name() . '.coupons.index', admin_workspace()), 'Edit' => ''];
            $coupon = Coupon::with('offerDiscount')->findOrFail($id);

            // url
            $url = [
                'store'    => route(user_role_name() . '.coupons.store', admin_workspace()),
                'update'   => route(user_role_name() . '.coupons.update', admin_workspace()),
                'redirect' => route(user_role_name() . ".coupons.index", admin_workspace())
            ];

            return view('backend.admin.pages.coupons.form', compact('coupon', 'breadcrumb', 'services', 'url'));
        } else {
            abort(401);
        }
    }

    /**
     * Coupon store
     * @method POST
     * @param Illuminate\Http\Request $request
     * @return Response
     */
    public function update(CouponRequest $request, $subdomain)
    {
        if ($request->ajax()) {
            DB::beginTransaction();

            try {
                if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
                    Coupon::find($request->update_id)->update([
                        'coupon_code'       => $request->coupon_code,
                        'description'       => $request->description,
                        'discount_type'     => $request->discount_type,
                        'discount_duration' => $request->discount_duration,
                        'is_one_use'        => $request->one_use_per_customer ? 1 : 0,
                        'is_number_use'     => $request->number_use_per_user_check ? 1 : 0,
                        'is_expiry_date'     => $request->expiry_date_check ? 1 : 0,
                        'how_number_use'    => $request->number_use_per_user,
                        'expiry_date'       => $request->expiry_date,
                    ]);

                    CouponDiscount::where('coupon_id', $request->update_id)->delete();

                    foreach ($request->applies as $value) {
                        CouponDiscount::create([
                            'coupon_id'   => $request->update_id,
                            'service_ids' => json_encode($service_date[] = [$value['services']]),
                            'discount'    => $value['discount'],
                        ]);
                    }

                    $output = ['status' => 'success', 'message' => 'Coupon updated successfull'];
                    DB::commit();
                } else {
                    $output = ['status' => 'error', 'message' => UNAUTHORIZED];
                }
            } catch (\Exception $e) {
                DB::rollback();
                $output = ['status' => 'danger', 'message' => 'Server Error.'];
            }

            return response()->json($output);
        }
    }


    /**
     * Coupon status change
     * @param Illuminate\Http\Request $request
     * @method POST
     * @return Response
     */
    public function status(Request $request, $subdomain)
    {
        if ($request->ajax()) {
            if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
                $id = $request->data_id;
                $status = $request->status;
                $success_title = $request->success_title;

                Coupon::find($id)->update([
                    'status' => $status,
                ]);

                $output = ['status' => 'success', 'message' => $success_title];
            } else {
                $output = ['status' => 'error', 'message' => UNAUTHORIZED];
            }

            return response()->json($output);
        }
    }

    /**
     * Copy the form for data the specified resource.
     *
     * @param  \App\Models\Coupon  $id
     * @return \Illuminate\Http\Response
     */
    public function duplicate($subdomain, $id)
    {
        DB::beginTransaction();
        try {
            if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
                $coupon = Coupon::findOrFail($id);
                $duplicate = $coupon->duplicate();
                $duplicate->coupon_code = $duplicate->coupon_code . '(Copy)';
                $duplicate->save();

                DB::commit();

                return redirect()->route(user_role_name() . '.coupons.edit', ['subdomain' => admin_workspace(), 'id' => $duplicate->id])
                    ->with('success', 'Coupon copied.');
            } else {
                return back()->with('error', UNAUTHORIZED);
            }
        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', $e->getMessage());
        }
    }

    /**
     * Coupon delete
     * @param Illuminate\Http\Request $request
     * @method POST
     * @return Response
     */

    public function delete(Request $request, $subdomain)
    {
        if ($request->ajax()) {
            if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
                $id = $request->data_id;
                $success_title = $request->success_title;

                Coupon::find($id)->delete();
                CouponDiscount::where('coupon_id', $id)->delete();

                $output = ['status' => 'success', 'message' => $success_title];
            } else {
                $output = ['status' => 'error', 'message' => UNAUTHORIZED];
            }
            return response()->json($output);
        }
    }

    /**
     * Remove the select resource from storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function BulkDelete(Request $request, $subdomain)
    {
        if ($request->ajax()) {
            DB::beginTransaction();

            try {
                if (Gate::allows('isAdmin') || Gate::allows('isAdminManager')) {
                    $bulkId = explode(',', $request->bulk_id);
                    if ($request->operation == 'delete') {
                        Coupon::whereIn('id', $bulkId)->delete();
                        $output = ['status' => 'success', 'message' => 'Deleted successfully.'];
                    } else {
                        $output = ['status' => 'error', 'message' => 'Wrong action!'];
                    }

                    DB::commit();
                } else {
                    $output = ['status' => 'error', 'message' => UNAUTHORIZED];
                }
            } catch (\Exception $e) {
                DB::rollBack();
                $output = ['status' => 'error', 'message' => 'Server Error.'];
            }

            return response()->json($output);
        }
    }


    /**
     * coupon matcha form user
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function match_discount(Request $req)
    {
        if ($req->ajax()) {

            // get coupon information with offerDiscount  CouponDiscount table
            $data = Coupon::with('offerDiscount')->where('coupon_code', $req->coupon)->first();
            if ($data != '') {
                $service_id = $data['offerDiscount'][0]['service_ids'];
                $decoded_data = json_decode($service_id);
                $find_service_id = array_search($req->service_id_for_match,$decoded_data ,true);
                if ($find_service_id != '') {
                    $recunnig_data = Service::with('serviceKeys')->where('id',$req->service_id_for_match)->get();
                    // dd($recunnig_data[0]->recurring);


                    if($recunnig_data[0]->recurring==1){

                        $discount_duration = Coupon::select('discount_duration')->where('coupon_code', $req->coupon)->first();
                        $discount_duration = $discount_duration->discount_duration;

                        if($discount_duration == 2){
                        //     $get_user_id = Invoice::where('coupon_code', $req->coupon)->get();
                        //     foreach($get_user_id as $user){
                        //        $get_user = User::where('id',$user->user_id)->get();
                        //        if($get_user){
                        //         return response()->json([
                        //             'status' => 'error',
                        //             'message' => 'Already Usesed'
                        //         ]);
                        //        }else{
                        //         dd('now create');
                        //        }
                        //     }
                        }
                        else{
                            // Unlimited Payemnt
                        //    dd("Unlimited");
                        }
                    }

                    $count_of_uses_coupon = Invoice::where('coupon_code', $req->coupon)->count();
                    $how_number_use = $data->how_number_use;
                    $is_number_use = $how_number_use - $count_of_uses_coupon;
                    $is_cheak_date = $data->expiry_date;
                    $now_date = now()->format('m/d/Y');
                    //
                    if ($is_cheak_date >= $now_date || $is_cheak_date == null && $is_number_use > 0 || $how_number_use == null) {
                        // convart string data in integer
                    $replace_total = str_replace(',', '', $req->amount);
                    $total_amount = (int)($replace_total);
                    $discount_type = $data->discount_type;

                    if ($discount_type == 1) {
                        $discount_data =  $data['offerDiscount'][0]['discount'];
                        $discount_amount = (int)($discount_data);
                        $grand_total = $total_amount - $discount_amount;
                        if ($grand_total > 0) {
                            return response()->json([
                                'status' => 'success',
                                'discount_amount' => $discount_amount,
                                'grand_total' => $grand_total
                            ]);
                        } else {
                            return response()->json([
                                'status' => 'error',
                                'message' => 'Please  select a service'
                            ]);
                        }

                    }else {
                        // work in discount type == 2 (persentage)
                        $discount_data =  $data['offerDiscount'][0]['discount'];
                        $discount_amount = (int)($discount_data);


                        $discount_amount = ($discount_amount / 100) * $total_amount;
                        $grand_total = $total_amount - $discount_amount;
                        if ($grand_total > 0) {
                            return response()->json([
                                'status' => 'success',
                                'discount_amount' => $discount_amount,
                                'grand_total' => $grand_total
                            ]);
                        } else {
                            return response()->json([
                                'status' => 'error',
                                'message' => 'place select a service'
                            ]);
                        }

                    }
                    } else {
                        return response()->json([
                            'status' => 'error',
                            'message' => 'Coupon date expiry'
                            ]);
                    }


                } else {
                    return response()->json([
                    'status' => 'error',
                    'message' => 'Please select your service'
                    ]);
                }


            } else {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Please,Enter Your Coupon'
                ]);
            }
        }
    }



}
